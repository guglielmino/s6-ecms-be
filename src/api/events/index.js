'use strict';

import express from 'express';
import config from '../../config';
import {transformEvent} from './eventTransformer';
import {getDate} from '../api-utils';


export default function (app, AuthCheck, RoleCheck, { eventProvider }) {

	const router = express.Router();

	app.use('/api/events', router);

	/**
	 * @swagger
	 * definitions:
	 *   Event:
	 *     properties:
	 *       yesterday:
	 *         type: number
	 *         description: yesterday consumption
	 *       today:
	 *         type: number
	 *       period:
	 *         type: number
	 *       voltage:
	 *         type: number
	 *       time:
	 *         type: string
	 */

	/**
	 * @swagger
	 * parameters:
	 *   gateway:
	 *     name: gateway
	 *     in: path
	 *     description: gateway internal code
	 *     type: string
	 *     required: true
	 */


	/**
	 * @swagger
	 * /api/events/{gateway}:
	 *   parameters:
	 *     - $ref: '#/parameters/gateway'
	 *   get:
	 *     tags:
	 *      - Events
	 *     description: Returns events generated by devices belonging to a gateway
	 *     produces:
	 *      - application/json
	 *     responses:
	 *       200:
	 *         description: alerts
	 *         schema:
	 *           type: array
	 *           items:
	 *             $ref: '#/definitions/Event'
	 */
	router.get('/energy/:gateway', [AuthCheck()], function (req, res) {

		const date = getDate(req);
		const gateways = req.user.app_metadata.gateways;
		const reqGateway = req.params.gateway;

		if (gateways.indexOf(reqGateway) == -1)
			res.sendStatus(204);


		eventProvider
			.getEvents([reqGateway], date)
			.then(stat => {
				res.json(stat.map(e => transformEvent(e)));
			})
			.catch(err => {
				console.log(err);
				res.sendStatus(500);
				next(err);
			});

	});

	/**
	 * @swagger
	 * /api/events/:
	 *   get:
	 *     tags:
	 *      - Events
	 *     description: Returns events generated by devices belonging to all user gateways
	 *     produces:
	 *      - application/json
	 *     responses:
	 *       200:
	 *         description: alerts
	 *         schema:
	 *           type: array
	 *           items:
	 *             $ref: '#/definitions/Event'
	 */
	router.get('/energy/', [AuthCheck()], function (req, res, next) {
		const date = getDate(req);
		const gateways = req.user.app_metadata.gateways;

		eventProvider
			.getEvents(gateways, date)
			.then(stat => {
				res.json(stat.map(e => transformEvent(e)));
			})
			.catch(err => {
				res.sendStatus(500);
				next(err);
			});
	});

	return router;
}